// Leora Platform - Prisma Schema
// Multi-tenant SaaS for beverage alcohol distributors
// Primary tenant: Well Crafted

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// CORE: TENANCY & IDENTITY
// ============================================================================

model Tenant {
  id                String   @id @default(cuid())
  slug              String   @unique
  name              String
  domain            String?
  status            TenantStatus @default(ACTIVE)
  subscriptionTier  String   @default("starter") @map("subscription_tier")
  billingEmail      String?  @map("billing_email")
  contactEmail      String?  @map("contact_email")
  logoUrl           String?  @map("logo_url")
  primaryColor      String?  @map("primary_color")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  settings          TenantSettings?
  users             User[]
  portalUsers       PortalUser[]
  products          Product[]
  skus              Sku[]
  priceListEntries  PriceListEntry[]
  orders            Order[]
  invoices          Invoice[]
  payments          Payment[]
  customers         Customer[]
  suppliers         Supplier[]
  activities        Activity[]
  callPlans         CallPlan[]
  tasks             Task[]
  accountHealthSnapshots AccountHealthSnapshot[]
  salesMetrics      SalesMetric[]
  webhookSubscriptions WebhookSubscription[]
  webhookEvents     WebhookEvent[]
  integrationTokens IntegrationToken[]
  complianceFilings ComplianceFiling[]
  stateTaxRates     StateTaxRate[]
  carts             Cart[]
  lists             List[]
  notifications     Notification[]

  @@map("tenants")
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  ARCHIVED
}

model TenantSettings {
  id                String   @id @default(cuid())
  tenantId          String   @unique @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Business configuration
  defaultCurrency   String   @default("USD") @map("default_currency")
  timezone          String   @default("America/Los_Angeles")
  dateFormat        String   @default("MM/DD/YY") @map("date_format")

  // Health scoring thresholds
  revenueHealthDropPercent Decimal @default(15) @db.Decimal(5,2) @map("revenue_health_drop_percent")
  minimumOrdersForHealth   Int     @default(3) @map("minimum_orders_for_health")

  // Sample management
  defaultSampleAllowancePerRep Int @default(60) @map("default_sample_allowance_per_rep")
  requireManagerApprovalAbove  Int @default(60) @map("require_manager_approval_above")

  // Pace tracking
  minimumOrdersForPaceCalc     Int @default(3) @map("minimum_orders_for_pace_calc")
  paceRiskThresholdDays        Int @default(2) @map("pace_risk_threshold_days")

  // Portal settings
  portalEnabled     Boolean  @default(true) @map("portal_enabled")
  cartEnabled       Boolean  @default(true) @map("cart_enabled")
  invoiceVisibility Boolean  @default(true) @map("invoice_visibility")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("tenant_settings")
}

model User {
  id                String   @id @default(cuid())
  tenantId          String   @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  email             String
  passwordHash      String?  @map("password_hash")
  firstName         String?  @map("first_name")
  lastName          String?  @map("last_name")
  fullName          String?  @map("full_name")
  phone             String?
  avatarUrl         String?  @map("avatar_url")

  status            UserStatus @default(ACTIVE)
  emailVerified     Boolean  @default(false) @map("email_verified")
  emailVerifiedAt   DateTime? @map("email_verified_at")

  failedLoginAttempts Int    @default(0) @map("failed_login_attempts")
  lockedUntil       DateTime? @map("locked_until")
  lastLoginAt       DateTime? @map("last_login_at")
  lastLoginIp       String?  @map("last_login_ip")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  roleAssignments   UserRole[]
  activities        Activity[]
  callPlans         CallPlan[]
  tasks             Task[]
  salesMetrics      SalesMetric[]
  createdOrders     Order[] @relation("OrderCreatedBy")

  @@unique([tenantId, email])
  @@index([tenantId, status])
  @@map("users")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  LOCKED
}

model Role {
  id                String   @id @default(cuid())
  name              String
  displayName       String   @map("display_name")
  description       String?
  isSystemRole      Boolean  @default(false) @map("is_system_role")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  userRoles         UserRole[]
  portalUserRoles   PortalUserRole[]
  rolePermissions   RolePermission[]

  @@unique([name])
  @@map("roles")
}

model UserRole {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId            String   @map("role_id")
  role              Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  assignedAt        DateTime @default(now()) @map("assigned_at")
  assignedBy        String?  @map("assigned_by")

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id                String   @id @default(cuid())
  name              String   @unique
  displayName       String   @map("display_name")
  description       String?
  resource          String
  action            String

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  rolePermissions   RolePermission[]

  @@index([resource, action])
  @@map("permissions")
}

model RolePermission {
  id                String   @id @default(cuid())
  roleId            String   @map("role_id")
  role              Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId      String   @map("permission_id")
  permission        Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  grantedAt         DateTime @default(now()) @map("granted_at")
  grantedBy         String?  @map("granted_by")

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// ============================================================================
// PORTAL USERS (B2B Customers)
// ============================================================================

model PortalUser {
  id                String   @id @default(cuid())
  tenantId          String   @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerId        String?  @map("customer_id")
  customer          Customer? @relation(fields: [customerId], references: [id])

  email             String
  passwordHash      String?  @map("password_hash")
  firstName         String?  @map("first_name")
  lastName          String?  @map("last_name")
  fullName          String?  @map("full_name")
  phone             String?

  status            PortalUserStatus @default(ACTIVE)
  emailVerified     Boolean  @default(false) @map("email_verified")
  emailVerifiedAt   DateTime? @map("email_verified_at")

  failedLoginAttempts Int    @default(0) @map("failed_login_attempts")
  lockedUntil       DateTime? @map("locked_until")
  lastLoginAt       DateTime? @map("last_login_at")
  lastLoginIp       String?  @map("last_login_ip")

  preferences       Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  roleAssignments   PortalUserRole[]
  sessions          PortalSession[]
  orders            Order[]
  carts             Cart[]
  lists             List[]
  notifications     Notification[]

  @@unique([tenantId, email])
  @@index([tenantId, customerId])
  @@index([tenantId, status])
  @@map("portal_users")
}

enum PortalUserStatus {
  ACTIVE
  INACTIVE
  LOCKED
}

model PortalUserRole {
  id                String   @id @default(cuid())
  portalUserId      String   @map("portal_user_id")
  portalUser        PortalUser @relation(fields: [portalUserId], references: [id], onDelete: Cascade)
  roleId            String   @map("role_id")
  role              Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  assignedAt        DateTime @default(now()) @map("assigned_at")

  @@unique([portalUserId, roleId])
  @@map("portal_user_roles")
}

model PortalSession {
  id                String   @id @default(cuid())
  portalUserId      String   @map("portal_user_id")
  portalUser        PortalUser @relation(fields: [portalUserId], references: [id], onDelete: Cascade)

  accessToken       String   @unique @map("access_token")
  refreshToken      String?  @unique @map("refresh_token")

  ipAddress         String?  @map("ip_address")
  userAgent         String?  @map("user_agent")

  expiresAt         DateTime @map("expires_at")
  refreshExpiresAt  DateTime? @map("refresh_expires_at")

  createdAt         DateTime @default(now()) @map("created_at")
  lastActiveAt      DateTime @default(now()) @map("last_active_at")

  @@index([portalUserId])
  @@index([accessToken])
  @@map("portal_sessions")
}

// ============================================================================
// COMMERCE: PRODUCTS & INVENTORY
// ============================================================================

model Product {
  id                String   @id @default(cuid())
  tenantId          String   @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  supplierId        String?  @map("supplier_id")
  supplier          Supplier? @relation(fields: [supplierId], references: [id])

  sku               String
  name              String
  description       String?
  category          String?
  brand             String?
  varietal          String?
  vintage           String?
  region            String?

  alcoholType       AlcoholType? @map("alcohol_type")
  alcoholPercent    Decimal? @db.Decimal(5,2) @map("alcohol_percent")

  imageUrl          String?  @map("image_url")
  images            Json?

  status            ProductStatus @default(ACTIVE)
  isSample          Boolean  @default(false) @map("is_sample")

  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  skus              Sku[]
  priceListEntries  PriceListEntry[]
  orderLines        OrderLine[]
  inventoryRecords  Inventory[]
  cartItems         CartItem[]
  listItems         ListItem[]

  @@unique([tenantId, sku])
  @@index([tenantId, status])
  @@index([tenantId, category])
  @@index([supplierId])
  @@map("products")
}

enum AlcoholType {
  WINE
  BEER
  SPIRITS
  CIDER
  SAKE
  MEAD
  OTHER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

model Sku {
  id                String   @id @default(cuid())
  tenantId          String   @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  productId         String   @map("product_id")
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  skuCode           String   @map("sku_code")
  variantName       String?  @map("variant_name")

  packSize          String?  @map("pack_size")
  unitSize          String?  @map("unit_size")
  caseQuantity      Int?     @map("case_quantity")

  upc               String?
  gtin              String?

  basePrice         Decimal? @db.Decimal(10,2) @map("base_price")
  baseCurrency      String   @default("USD") @map("base_currency")

  weight            Decimal? @db.Decimal(10,2)
  weightUnit        String?  @map("weight_unit")

  status            SkuStatus @default(ACTIVE)

  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@unique([tenantId, skuCode])
  @@index([productId])
  @@map("skus")
}

enum SkuStatus {
  ACTIVE
  INACTIVE
}

model Inventory {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  productId         String @map("product_id")
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  warehouseLocation String? @map("warehouse_location")

  quantityOnHand    Int      @default(0) @map("quantity_on_hand")
  quantityReserved  Int      @default(0) @map("quantity_reserved")
  quantityAvailable Int      @default(0) @map("quantity_available")

  reorderPoint      Int? @map("reorder_point")
  reorderQuantity   Int? @map("reorder_quantity")

  lastRestockedAt   DateTime? @map("last_restocked_at")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([tenantId, productId])
  @@map("inventory")
}

model PriceListEntry {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  productId         String @map("product_id")
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  priceListName     String   @default("standard") @map("price_list_name")

  unitPrice         Decimal  @db.Decimal(10,2) @map("unit_price")
  currency          String   @default("USD")

  minQuantity       Int? @map("min_quantity")
  maxQuantity       Int? @map("max_quantity")

  customerTier      String? @map("customer_tier")

  validFrom         DateTime? @map("valid_from")
  validUntil        DateTime? @map("valid_until")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([tenantId, productId, priceListName])
  @@map("price_list_entries")
}

// ============================================================================
// COMMERCE: CUSTOMERS & SUPPLIERS
// ============================================================================

model Customer {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  accountNumber     String? @map("account_number")
  companyName       String @map("company_name")
  tradeName         String? @map("trade_name")

  primaryContactName String? @map("primary_contact_name")
  primaryContactEmail String? @map("primary_contact_email")
  primaryContactPhone String? @map("primary_contact_phone")

  billingAddress    Json? @map("billing_address")
  shippingAddress   Json? @map("shipping_address")

  status            CustomerStatus @default(ACTIVE)
  tier              String?

  licenseNumber     String? @map("license_number")
  licenseState      String? @map("license_state")
  licenseExpiry     DateTime? @map("license_expiry")

  paymentTerms      String? @map("payment_terms")
  creditLimit       Decimal? @db.Decimal(10,2) @map("credit_limit")

  notes             String?
  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  portalUsers       PortalUser[]
  orders            Order[]
  invoices          Invoice[]
  payments          Payment[]
  activities        Activity[]
  callPlans         CallPlan[]
  tasks             Task[]
  healthSnapshots   AccountHealthSnapshot[]
  carts             Cart[]

  @@unique([tenantId, accountNumber])
  @@index([tenantId, status])
  @@map("customers")
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Supplier {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  name              String
  slug              String?

  contactName       String? @map("contact_name")
  contactEmail      String? @map("contact_email")
  contactPhone      String?

  address           Json?

  status            String   @default("active")

  notes             String?
  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  products          Product[]

  @@unique([tenantId, slug])
  @@index([tenantId])
  @@map("suppliers")
}

// ============================================================================
// COMMERCE: ORDERS & INVOICES
// ============================================================================

model Order {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerId        String @map("customer_id")
  customer          Customer @relation(fields: [customerId], references: [id])
  portalUserId      String? @map("portal_user_id")
  portalUser        PortalUser? @relation(fields: [portalUserId], references: [id])

  orderNumber       String   @unique @map("order_number")
  poNumber          String? @map("po_number")

  status            OrderStatus @default(PENDING)

  orderDate         DateTime @default(now()) @map("order_date")
  requestedDeliveryDate DateTime? @map("requested_delivery_date")
  actualDeliveryDate DateTime? @map("actual_delivery_date")

  subtotal          Decimal  @db.Decimal(10,2)
  taxAmount         Decimal  @db.Decimal(10,2) @default(0) @map("tax_amount")
  shippingAmount    Decimal  @db.Decimal(10,2) @default(0) @map("shipping_amount")
  discountAmount    Decimal  @db.Decimal(10,2) @default(0) @map("discount_amount")
  totalAmount       Decimal  @db.Decimal(10,2) @map("total_amount")

  currency          String   @default("USD")

  shippingAddress   Json? @map("shipping_address")
  billingAddress    Json? @map("billing_address")

  notes             String?
  internalNotes     String? @map("internal_notes")

  isSampleOrder     Boolean  @default(false) @map("is_sample_order")

  createdBy         String? @map("created_by")
  createdByUser     User?    @relation("OrderCreatedBy", fields: [createdBy], references: [id])

  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  lines             OrderLine[]
  invoices          Invoice[]
  activities        Activity[]

  @@index([tenantId, customerId])
  @@index([tenantId, status])
  @@index([orderDate])
  @@map("orders")
}

enum OrderStatus {
  DRAFT
  PENDING
  CONFIRMED
  IN_PROGRESS
  SHIPPED
  DELIVERED
  CANCELLED
  ON_HOLD
}

model OrderLine {
  id                String   @id @default(cuid())
  orderId           String @map("order_id")
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId         String @map("product_id")
  product           Product  @relation(fields: [productId], references: [id])

  lineNumber        Int @map("line_number")

  quantity          Int
  unitPrice         Decimal  @db.Decimal(10,2) @map("unit_price")
  subtotal          Decimal  @db.Decimal(10,2)
  taxAmount         Decimal  @db.Decimal(10,2) @default(0) @map("tax_amount")
  discountAmount    Decimal  @db.Decimal(10,2) @default(0) @map("discount_amount")
  totalAmount       Decimal  @db.Decimal(10,2) @map("total_amount")

  appliedPricingRules Json? @map("applied_pricing_rules")

  isSample          Boolean  @default(false) @map("is_sample")

  notes             String?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([orderId])
  @@index([productId])
  @@map("order_lines")
}

model Invoice {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerId        String @map("customer_id")
  customer          Customer @relation(fields: [customerId], references: [id])
  orderId           String? @map("order_id")
  order             Order?   @relation(fields: [orderId], references: [id])

  invoiceNumber     String   @unique @map("invoice_number")

  status            InvoiceStatus @default(DRAFT)

  invoiceDate       DateTime @default(now()) @map("invoice_date")
  dueDate           DateTime @map("due_date")
  paidDate          DateTime? @map("paid_date")

  subtotal          Decimal  @db.Decimal(10,2)
  taxAmount         Decimal  @db.Decimal(10,2) @default(0) @map("tax_amount")
  shippingAmount    Decimal  @db.Decimal(10,2) @default(0) @map("shipping_amount")
  discountAmount    Decimal  @db.Decimal(10,2) @default(0) @map("discount_amount")
  totalAmount       Decimal  @db.Decimal(10,2) @map("total_amount")
  paidAmount        Decimal  @db.Decimal(10,2) @default(0) @map("paid_amount")
  balanceDue        Decimal  @db.Decimal(10,2) @map("balance_due")

  currency          String   @default("USD")

  notes             String?

  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  payments          Payment[]

  @@index([tenantId, customerId])
  @@index([tenantId, status])
  @@index([invoiceDate])
  @@index([dueDate])
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
}

model Payment {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerId        String @map("customer_id")
  customer          Customer @relation(fields: [customerId], references: [id])
  invoiceId         String? @map("invoice_id")
  invoice           Invoice? @relation(fields: [invoiceId], references: [id])

  paymentNumber     String   @unique @map("payment_number")

  amount            Decimal  @db.Decimal(10,2)
  currency          String   @default("USD")

  paymentMethod     String @map("payment_method")
  paymentDate       DateTime @default(now()) @map("payment_date")

  referenceNumber   String? @map("reference_number")

  status            PaymentStatus @default(PENDING)

  notes             String?

  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([tenantId, customerId])
  @@index([invoiceId])
  @@index([paymentDate])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

// ============================================================================
// COMMERCE: CART & LISTS
// ============================================================================

model Cart {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  portalUserId      String @map("portal_user_id")
  portalUser        PortalUser @relation(fields: [portalUserId], references: [id], onDelete: Cascade)
  customerId        String? @map("customer_id")
  customer          Customer? @relation(fields: [customerId], references: [id])

  status            CartStatus @default(ACTIVE)

  subtotal          Decimal  @db.Decimal(10,2) @default(0)
  taxAmount         Decimal  @db.Decimal(10,2) @default(0) @map("tax_amount")
  shippingAmount    Decimal  @db.Decimal(10,2) @default(0) @map("shipping_amount")
  discountAmount    Decimal  @db.Decimal(10,2) @default(0) @map("discount_amount")
  totalAmount       Decimal  @db.Decimal(10,2) @default(0) @map("total_amount")

  notes             String?

  convertedToOrderId String? @map("converted_to_order_id")

  expiresAt         DateTime? @map("expires_at")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  items             CartItem[]

  @@index([tenantId, portalUserId])
  @@index([customerId])
  @@map("carts")
}

enum CartStatus {
  ACTIVE
  CONVERTED
  ABANDONED
  EXPIRED
}

model CartItem {
  id                String   @id @default(cuid())
  cartId            String @map("cart_id")
  cart              Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId         String @map("product_id")
  product           Product  @relation(fields: [productId], references: [id])

  quantity          Int      @default(1)
  unitPrice         Decimal  @db.Decimal(10,2) @map("unit_price")
  subtotal          Decimal  @db.Decimal(10,2)

  notes             String?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

model List {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  portalUserId      String @map("portal_user_id")
  portalUser        PortalUser @relation(fields: [portalUserId], references: [id], onDelete: Cascade)

  name              String
  description       String?

  isDefault         Boolean  @default(false) @map("is_default")
  isShared          Boolean  @default(false) @map("is_shared")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  items             ListItem[]

  @@index([tenantId, portalUserId])
  @@map("lists")
}

model ListItem {
  id                String   @id @default(cuid())
  listId            String @map("list_id")
  list              List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  productId         String @map("product_id")
  product           Product  @relation(fields: [productId], references: [id])

  notes             String?
  sortOrder         Int? @map("sort_order")

  createdAt         DateTime @default(now()) @map("created_at")

  @@index([listId])
  @@index([productId])
  @@map("list_items")
}

// ============================================================================
// INTELLIGENCE: ACTIVITIES & CALL PLANNING
// ============================================================================

model Activity {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerId        String @map("customer_id")
  customer          Customer @relation(fields: [customerId], references: [id])
  userId            String @map("user_id")
  user              User     @relation(fields: [userId], references: [id])
  orderId           String? @map("order_id")
  order             Order?   @relation(fields: [orderId], references: [id])

  activityType      String @map("activity_type")
  subject           String?
  description       String?

  activityDate      DateTime @default(now()) @map("activity_date")
  dueDate           DateTime? @map("due_date")
  completedDate     DateTime? @map("completed_date")

  status            ActivityStatus @default(PENDING)
  priority          ActivityPriority @default(MEDIUM)

  outcome           String?
  notes             String?

  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([tenantId, customerId])
  @@index([userId])
  @@index([activityDate])
  @@map("activities")
}

enum ActivityStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ActivityPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model CallPlan {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId            String @map("user_id")
  user              User     @relation(fields: [userId], references: [id])
  customerId        String @map("customer_id")
  customer          Customer @relation(fields: [customerId], references: [id])

  planDate          DateTime @map("plan_date")

  status            CallPlanStatus @default(SCHEDULED)

  objective         String?
  notes             String?
  outcome           String?

  completedAt       DateTime? @map("completed_at")

  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([tenantId, userId])
  @@index([customerId])
  @@index([planDate])
  @@map("call_plans")
}

enum CallPlanStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

model Task {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId            String @map("user_id")
  user              User     @relation(fields: [userId], references: [id])
  customerId        String? @map("customer_id")
  customer          Customer? @relation(fields: [customerId], references: [id])

  title             String
  description       String?

  status            TaskStatus @default(PENDING)
  priority          TaskPriority @default(MEDIUM)

  dueDate           DateTime? @map("due_date")
  completedDate     DateTime? @map("completed_date")

  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([tenantId, userId])
  @@index([customerId])
  @@index([dueDate])
  @@map("tasks")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// ============================================================================
// INTELLIGENCE: HEALTH & METRICS
// ============================================================================

model AccountHealthSnapshot {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerId        String @map("customer_id")
  customer          Customer @relation(fields: [customerId], references: [id])

  snapshotDate      DateTime @default(now()) @map("snapshot_date")

  // Revenue health
  currentMonthRevenue Decimal @db.Decimal(10,2) @map("current_month_revenue")
  averageMonthRevenue Decimal @db.Decimal(10,2) @map("average_month_revenue")
  revenueDropPercent  Decimal? @db.Decimal(5,2) @map("revenue_drop_percent")
  revenueHealthStatus String @map("revenue_health_status") //  healthy | at_risk | critical

  // Order pace (ARPDD)
  establishedPaceDays Decimal? @db.Decimal(5,2) @map("established_pace_days")
  daysSinceLastOrder  Int? @map("days_since_last_order")
  paceStatus          String @map("pace_status") //  on_track | at_risk | overdue

  // Sample usage
  samplePullsThisMonth Int     @default(0) @map("sample_pulls_this_month")
  sampleAllowance      Int     @default(60) @map("sample_allowance")

  // Overall score
  healthScore         Decimal? @db.Decimal(5,2) @map("health_score")

  metadata            Json?

  createdAt           DateTime @default(now()) @map("created_at")

  @@index([tenantId, customerId])
  @@index([snapshotDate])
  @@map("account_health_snapshots")
}

model SalesMetric {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId            String? @map("user_id")
  user              User?    @relation(fields: [userId], references: [id])

  metricType        String @map("metric_type")
  metricName        String @map("metric_name")
  metricValue       Decimal  @db.Decimal(15,4) @map("metric_value")

  period            String?
  periodStart       DateTime? @map("period_start")
  periodEnd         DateTime? @map("period_end")

  dimensions        Json?

  createdAt         DateTime @default(now()) @map("created_at")

  @@index([tenantId, metricType])
  @@index([userId])
  @@index([periodStart])
  @@map("sales_metrics")
}

// ============================================================================
// COMPLIANCE & TAX
// ============================================================================

model ComplianceFiling {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  state             String
  filingType        String @map("filing_type")
  period            String

  dueDate           DateTime @map("due_date")
  filedDate         DateTime? @map("filed_date")

  status            FilingStatus @default(PENDING)

  documentUrl       String? @map("document_url")

  notes             String?
  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([tenantId, state])
  @@index([dueDate])
  @@map("compliance_filings")
}

enum FilingStatus {
  PENDING
  FILED
  OVERDUE
  REJECTED
}

model StateTaxRate {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  state             String
  alcoholType       AlcoholType @map("alcohol_type")

  exciseTaxRate     Decimal  @db.Decimal(10,4) @map("excise_tax_rate")
  salesTaxRate      Decimal  @db.Decimal(5,4) @map("sales_tax_rate")

  effectiveDate     DateTime @map("effective_date")
  expiresAt         DateTime? @map("expires_at")

  notes             String?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([tenantId, state])
  @@map("state_tax_rates")
}

// ============================================================================
// INTEGRATIONS: WEBHOOKS & TOKENS
// ============================================================================

model WebhookSubscription {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  name              String
  url               String

  events            String[]

  status            WebhookStatus @default(ACTIVE)
  secret            String

  retryCount        Int      @default(3) @map("retry_count")
  timeout           Int      @default(30)

  lastSuccessAt     DateTime? @map("last_success_at")
  lastFailureAt     DateTime? @map("last_failure_at")
  consecutiveFailures Int    @default(0) @map("consecutive_failures")

  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  deliveries        WebhookDelivery[]

  @@index([tenantId, status])
  @@map("webhook_subscriptions")
}

enum WebhookStatus {
  ACTIVE
  PAUSED
  DISABLED
  ERROR
}

model WebhookEvent {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  eventType         String @map("event_type")
  entityType        String @map("entity_type")
  entityId          String @map("entity_id")

  payload           Json

  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  deliveries        WebhookDelivery[]

  @@index([tenantId, eventType])
  @@index([createdAt])
  @@map("webhook_events")
}

model WebhookDelivery {
  id                String   @id @default(cuid())
  subscriptionId    String @map("subscription_id")
  subscription      WebhookSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  eventId           String @map("event_id")
  event             WebhookEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  status            DeliveryStatus @default(PENDING)

  attemptCount      Int      @default(0) @map("attempt_count")
  maxAttempts       Int      @default(3) @map("max_attempts")

  lastAttemptAt     DateTime? @map("last_attempt_at")
  nextAttemptAt     DateTime? @map("next_attempt_at")

  response          Json?
  errorMessage      String? @map("error_message")

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([subscriptionId, status])
  @@index([nextAttemptAt])
  @@map("webhook_deliveries")
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
  CANCELLED
}

model IntegrationToken {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  provider          String
  tokenType         String   @default("api_key") @map("token_type")

  accessToken       String @map("access_token")
  refreshToken      String? @map("refresh_token")

  expiresAt         DateTime? @map("expires_at")

  scopes            String[]

  status            TokenStatus @default(ACTIVE)

  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([tenantId, provider])
  @@map("integration_tokens")
}

enum TokenStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

// ============================================================================
// NOTIFICATIONS
// ============================================================================

model Notification {
  id                String   @id @default(cuid())
  tenantId          String @map("tenant_id")
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  portalUserId      String @map("portal_user_id")
  portalUser        PortalUser @relation(fields: [portalUserId], references: [id], onDelete: Cascade)

  type              String
  title             String
  message           String

  priority          NotificationPriority @default(NORMAL)

  isRead            Boolean  @default(false) @map("is_read")
  readAt            DateTime? @map("read_at")

  actionUrl         String? @map("action_url")

  metadata          Json?

  createdAt         DateTime @default(now()) @map("created_at")

  @@index([tenantId, portalUserId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
