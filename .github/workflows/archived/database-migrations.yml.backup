name: Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - production
          - staging
          - development
      migration_action:
        description: 'Migration action'
        required: true
        type: choice
        options:
          - deploy
          - status
          - validate
          - reset

  push:
    paths:
      - 'prisma/schema.prisma'
      - 'prisma/migrations/**'
    branches:
      - main

env:
  NODE_VERSION: '20'

jobs:
  migration-check:
    name: Migration Status Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check migration status
        id: migration-status
        run: |
          echo "Checking migration status..."
          npx prisma migrate status > migration-status.txt 2>&1 || true
          cat migration-status.txt

          if grep -q "Database schema is up to date" migration-status.txt; then
            echo "status=up-to-date" >> $GITHUB_OUTPUT
          elif grep -q "following migrations have not yet been applied" migration-status.txt; then
            echo "status=pending" >> $GITHUB_OUTPUT
          else
            echo "status=unknown" >> $GITHUB_OUTPUT
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Validate Prisma schema
        run: npx prisma validate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Generate migration diff
        if: steps.migration-status.outputs.status == 'pending'
        run: |
          echo "Generating migration diff..."
          npx prisma migrate diff \
            --from-schema-datamodel prisma/schema.prisma \
            --to-schema-datasource prisma/schema.prisma \
            --script > migration-diff.sql
          cat migration-diff.sql
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Upload migration artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: migration-check-results
          path: |
            migration-status.txt
            migration-diff.sql

  deploy-migrations:
    name: Deploy Migrations
    runs-on: ubuntu-latest
    needs: migration-check
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.migration_action == 'deploy') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    timeout-minutes: 15
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create database backup
        run: |
          echo "Creating backup before migration..."
          timestamp=$(date +%Y%m%d_%H%M%S)
          echo "BACKUP_TIMESTAMP=$timestamp" >> $GITHUB_ENV
          # Backup command would go here if using pg_dump
          echo "Backup timestamp: $timestamp"

      - name: Deploy migrations
        id: deploy
        run: |
          echo "Deploying migrations to ${{ github.event.inputs.environment || 'production' }}..."
          npx prisma migrate deploy --schema=./prisma/schema.prisma
          echo "Migrations deployed successfully"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Verify migration status
        run: npx prisma migrate status
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Notify success
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const env = '${{ github.event.inputs.environment || 'production' }}'
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: `Migrations deployed to ${env}`,
              context: `Database Migrations (${env})`
            })

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Migration failed, consider manual rollback to backup: ${{ env.BACKUP_TIMESTAMP }}"
          # Rollback logic would go here

  validate-schema:
    name: Validate Schema Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for schema changes
        id: schema-check
        run: |
          git fetch origin ${{ github.base_ref }}
          if git diff origin/${{ github.base_ref }} HEAD -- prisma/schema.prisma | grep -q "^+"; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate migration preview
        if: steps.schema-check.outputs.has_changes == 'true'
        run: |
          echo "Generating migration preview..."
          npx prisma migrate dev --name preview_$(date +%s) --create-only || true

      - name: Validate schema
        run: npx prisma validate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Comment PR with schema changes
        if: steps.schema-check.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `⚠️ **Database schema changes detected**\n\nThis PR includes changes to \`prisma/schema.prisma\`.\n\n**Before merging:**\n1. Review the generated migration files\n2. Test migrations on staging\n3. Plan for production deployment window\n4. Consider data migration scripts if needed\n\n**Deployment steps:**\n1. Merge PR to main\n2. Migrations will auto-deploy with production deployment\n3. Monitor application health post-deployment`
            })
